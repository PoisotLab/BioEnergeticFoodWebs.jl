{
    "docs": [
        {
            "location": "/", 
            "text": "Outline\n\n\n\n\nGetting started with \nBioEnergeticFoodWebs\n\n\nInstalling \njulia\n\n\nInstalling \nBioEnergeticFoodWebs\n\n\nKeeping up to date\n\n\nCiting the package\n\n\n\n\n\n\nGenerating random networks\n\n\nNiche model\n\n\n\n\n\n\nFirst simulation\n\n\nContributing to the package\n\n\nReporting issues\n\n\nAdding code and features\n\n\n\n\n\n\nExtinctions\n\n\nRewiring parameters\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\nLibrary Outline\n\n\n\n\nPublic Documentation\n\n\nContents\n\n\nIndex\n\n\nSetting up simulations\n\n\nGenerating networks\n\n\nSimulating and saving the output\n\n\nAnalysis of output\n\n\n\n\n\n\nInternal Documentation\n\n\nContents\n\n\nIndex\n\n\nFunctions and methods for networks\n\n\nODE wrappers and functions for integration\n\n\nFunctions to work on output\n\n\nFunctions to prepare and check parameters\n\n\n\n\n\n\n\n\n\n\nIndex\n\n\n\n\nFunctions\n\n\n\n\nBioEnergeticFoodWebs.foodweb_evenness\n\n\nBioEnergeticFoodWebs.nichemodel\n\n\nBioEnergeticFoodWebs.population_biomass\n\n\nBioEnergeticFoodWebs.population_stability\n\n\nBioEnergeticFoodWebs.save\n\n\nBioEnergeticFoodWebs.simulate\n\n\nBioEnergeticFoodWebs.species_persistence\n\n\nBioEnergeticFoodWebs.species_richness\n\n\nBioEnergeticFoodWebs.total_biomass\n\n\nBioEnergeticFoodWebs.check_food_web\n\n\nBioEnergeticFoodWebs.check_initial_parameters\n\n\nBioEnergeticFoodWebs.check_parameters\n\n\nBioEnergeticFoodWebs.coefficient_of_variation\n\n\nBioEnergeticFoodWebs.connectance\n\n\nBioEnergeticFoodWebs.dBdt\n\n\nBioEnergeticFoodWebs.distance_to_producer\n\n\nBioEnergeticFoodWebs.growthrate\n\n\nBioEnergeticFoodWebs.model_parameters\n\n\nBioEnergeticFoodWebs.shannon\n\n\nBioEnergeticFoodWebs.trophic_rank", 
            "title": "Home"
        }, 
        {
            "location": "/#outline", 
            "text": "Getting started with  BioEnergeticFoodWebs  Installing  julia  Installing  BioEnergeticFoodWebs  Keeping up to date  Citing the package    Generating random networks  Niche model    First simulation  Contributing to the package  Reporting issues  Adding code and features    Extinctions  Rewiring parameters    References", 
            "title": "Outline"
        }, 
        {
            "location": "/#library-outline", 
            "text": "Public Documentation  Contents  Index  Setting up simulations  Generating networks  Simulating and saving the output  Analysis of output    Internal Documentation  Contents  Index  Functions and methods for networks  ODE wrappers and functions for integration  Functions to work on output  Functions to prepare and check parameters", 
            "title": "Library Outline"
        }, 
        {
            "location": "/#index", 
            "text": "", 
            "title": "Index"
        }, 
        {
            "location": "/#functions", 
            "text": "BioEnergeticFoodWebs.foodweb_evenness  BioEnergeticFoodWebs.nichemodel  BioEnergeticFoodWebs.population_biomass  BioEnergeticFoodWebs.population_stability  BioEnergeticFoodWebs.save  BioEnergeticFoodWebs.simulate  BioEnergeticFoodWebs.species_persistence  BioEnergeticFoodWebs.species_richness  BioEnergeticFoodWebs.total_biomass  BioEnergeticFoodWebs.check_food_web  BioEnergeticFoodWebs.check_initial_parameters  BioEnergeticFoodWebs.check_parameters  BioEnergeticFoodWebs.coefficient_of_variation  BioEnergeticFoodWebs.connectance  BioEnergeticFoodWebs.dBdt  BioEnergeticFoodWebs.distance_to_producer  BioEnergeticFoodWebs.growthrate  BioEnergeticFoodWebs.model_parameters  BioEnergeticFoodWebs.shannon  BioEnergeticFoodWebs.trophic_rank", 
            "title": "Functions"
        }, 
        {
            "location": "/man/installation/", 
            "text": "Getting started with \nBioEnergeticFoodWebs\n\n\n\n\nInstalling \njulia\n\n\nThe recommended way to install Julia is from the \nJuliaLang\n website. Most GNU/Linux distributions have a package named \njulia\n, and there are [platform-specific][pfsi] instructions if needs be.\n\n\nThere are further specific instructions to install a Julia kernel in Jupyter on the \nIJulia\n page.\n\n\n\n\nInstalling \nBioEnergeticFoodWebs\n\n\nThe current version can be installed by typing the following line into Julia (which is usually started from the command line):\n\n\nPkg.add(\nBioEnergeticFoodWebs\n)\n\n\n\n\n\n\nWarning\n\n\nThe version of \nBioEnergeticFoodWebs\n that will be installed depends on your version of \njulia\n. By default, the current version \nalways\n works on the current released version of \njulia\n; but we make no guarantee that it will work on the previous version, or the one currently in development.\n\n\n\n\nThe package can be loaded with\n\n\nusing BioEnergeticFoodWebs\n\n\n\n\n\n\nKeeping up to date\n\n\nIf you have already installed the package, you can check for updates with\n\n\nPkg.update()\n\n\n\n\n\n\nCiting the package\n\n\nThe package itself can be cited as\n\n\n\n\nSummary\n\n\nTimoth\u00e9e Poisot, Eva Delmas, Viral B. Shah, Tony Kelman, \n Tom clegg. (2017). PoisotLab/BioEnergeticFoodWebs.jl: v0.3.1 [Data set]. Zenodo. http://doi.org/10.5281/zenodo.401053\n\n\n\n\nIf you want to also cite the software note describing the relase of \nv0.2.0\n, you can cite\n\n\n\n\nSummary\n\n\nEva Delmas, Ulrich Brose, Dominique Gravel, Daniel Stouffer, Timoth\u00e9e Poisot. (2016). Simulations of biomass dynamics in community food webs. Methods col Evol. http://doi.org/10.1111/2041-210X.12713", 
            "title": "Installation"
        }, 
        {
            "location": "/man/installation/#getting-started-with-bioenergeticfoodwebs", 
            "text": "", 
            "title": "Getting started with BioEnergeticFoodWebs"
        }, 
        {
            "location": "/man/installation/#installing-julia", 
            "text": "The recommended way to install Julia is from the  JuliaLang  website. Most GNU/Linux distributions have a package named  julia , and there are [platform-specific][pfsi] instructions if needs be.  There are further specific instructions to install a Julia kernel in Jupyter on the  IJulia  page.", 
            "title": "Installing julia"
        }, 
        {
            "location": "/man/installation/#installing-bioenergeticfoodwebs", 
            "text": "The current version can be installed by typing the following line into Julia (which is usually started from the command line):  Pkg.add( BioEnergeticFoodWebs )   Warning  The version of  BioEnergeticFoodWebs  that will be installed depends on your version of  julia . By default, the current version  always  works on the current released version of  julia ; but we make no guarantee that it will work on the previous version, or the one currently in development.   The package can be loaded with  using BioEnergeticFoodWebs", 
            "title": "Installing BioEnergeticFoodWebs"
        }, 
        {
            "location": "/man/installation/#keeping-up-to-date", 
            "text": "If you have already installed the package, you can check for updates with  Pkg.update()", 
            "title": "Keeping up to date"
        }, 
        {
            "location": "/man/installation/#citing-the-package", 
            "text": "The package itself can be cited as   Summary  Timoth\u00e9e Poisot, Eva Delmas, Viral B. Shah, Tony Kelman,   Tom clegg. (2017). PoisotLab/BioEnergeticFoodWebs.jl: v0.3.1 [Data set]. Zenodo. http://doi.org/10.5281/zenodo.401053   If you want to also cite the software note describing the relase of  v0.2.0 , you can cite   Summary  Eva Delmas, Ulrich Brose, Dominique Gravel, Daniel Stouffer, Timoth\u00e9e Poisot. (2016). Simulations of biomass dynamics in community food webs. Methods col Evol. http://doi.org/10.1111/2041-210X.12713", 
            "title": "Citing the package"
        }, 
        {
            "location": "/man/random/", 
            "text": "Generating random networks\n\n\nUsers can generate random networks. It is, of course, possible to supply your own. The networks should be presented as matrices of 0 and 1. Internally, \nbefwm\n will check that there are as many rows as there are columns.\n\n\n\n\nNiche model\n\n\nFollowing Williams \n Martinez, we have implemented the \nniche\n model of food webs. This model represents allometric relationships between preys and predators well, and is therefore well suited to generate random networks.\n\n\nRandom niche model networks can be generated using \nnichemodel\n, which takes two arguments: the number of species \nS\n, and the desired connectance \nC\n:\n\n\nusing BioEnergeticFoodWebs\nnichemodel(10, 0.2)\n\n\n\n\n10\u00d710 Array{Int64,2}:\n 0  0  0  0  0  0  0  0  0  0\n 0  0  0  0  0  0  0  0  0  0\n 1  0  0  0  0  0  0  0  0  0\n 0  1  1  0  0  0  0  0  0  0\n 0  0  1  1  1  1  0  0  0  0\n 0  0  0  0  0  0  0  0  0  0\n 0  0  0  0  0  0  0  0  0  0\n 0  0  0  0  0  0  1  1  1  1\n 0  0  0  0  0  0  0  0  0  0\n 0  1  1  1  1  1  0  0  0  0\n\n\n\n\nNote that there are a number of keyword arguments (optional) that can be supplied: \ntolerance\n will give the allowed deviation from the desired connectance, and \ntoltype\n will indicate whether the error is relative or absolute.", 
            "title": "Generating random networks"
        }, 
        {
            "location": "/man/random/#generating-random-networks", 
            "text": "Users can generate random networks. It is, of course, possible to supply your own. The networks should be presented as matrices of 0 and 1. Internally,  befwm  will check that there are as many rows as there are columns.", 
            "title": "Generating random networks"
        }, 
        {
            "location": "/man/random/#niche-model", 
            "text": "Following Williams   Martinez, we have implemented the  niche  model of food webs. This model represents allometric relationships between preys and predators well, and is therefore well suited to generate random networks.  Random niche model networks can be generated using  nichemodel , which takes two arguments: the number of species  S , and the desired connectance  C :  using BioEnergeticFoodWebs\nnichemodel(10, 0.2)  10\u00d710 Array{Int64,2}:\n 0  0  0  0  0  0  0  0  0  0\n 0  0  0  0  0  0  0  0  0  0\n 1  0  0  0  0  0  0  0  0  0\n 0  1  1  0  0  0  0  0  0  0\n 0  0  1  1  1  1  0  0  0  0\n 0  0  0  0  0  0  0  0  0  0\n 0  0  0  0  0  0  0  0  0  0\n 0  0  0  0  0  0  1  1  1  1\n 0  0  0  0  0  0  0  0  0  0\n 0  1  1  1  1  1  0  0  0  0  Note that there are a number of keyword arguments (optional) that can be supplied:  tolerance  will give the allowed deviation from the desired connectance, and  toltype  will indicate whether the error is relative or absolute.", 
            "title": "Niche model"
        }, 
        {
            "location": "/man/first_simulation/", 
            "text": "First simulation\n\n\nStarting a simulation has three steps: getting the network, deciding on the parameters, and then starting the simulation itself.\n\n\nIn this example, we will start with a simple generation of the null model, then generate the default set of parameters (see \n?model_parameters\n), and start a short simulation.\n\n\nDo keep in mind that all functions are documented, so you can type in \n?function_name\n from within \nJulia\n, and get access to the documentation.\n\n\nA = nichemodel(10, 0.3);\np = model_parameters(A);\nb = rand(size(A, 1));\n\ns = simulate(p, b, start=0, stop=50, steps=1000)\n\n\n\n\nThe \nA\n matrix, which is used by subsequent functions, has predators in rows, and preys in columns. It can only have 0 and 1.", 
            "title": "First simulation"
        }, 
        {
            "location": "/man/first_simulation/#first-simulation", 
            "text": "Starting a simulation has three steps: getting the network, deciding on the parameters, and then starting the simulation itself.  In this example, we will start with a simple generation of the null model, then generate the default set of parameters (see  ?model_parameters ), and start a short simulation.  Do keep in mind that all functions are documented, so you can type in  ?function_name  from within  Julia , and get access to the documentation.  A = nichemodel(10, 0.3);\np = model_parameters(A);\nb = rand(size(A, 1));\n\ns = simulate(p, b, start=0, stop=50, steps=1000)  The  A  matrix, which is used by subsequent functions, has predators in rows, and preys in columns. It can only have 0 and 1.", 
            "title": "First simulation"
        }, 
        {
            "location": "/man/extinctions/", 
            "text": "Extinctions\n\n\nSimulations can be run with rewiring by using the \nrewiring_method\n keyword in \nmodel_parameters\n. This allows species to form new links following extinctions according to some set of rules. There are four options for the \nrewiring_method\n argument:\n\n\n\n\n:none\n - Default setting with no rewiring\n\n\n:ADBM\n - The allometric diet breadth model (ADBM) as described in Petchey\n\n\n\n\net al. (2008). Based on optimal foraging theory.\n\n\n\n\n:Gilljam\n - The rewiring mechanism used by Gilljam et al.(2015) based on diet\n\n\n\n\nsimilarity.\n\n\n\n\n:stan\n - The rewiring mechanism used by Staniczenko et al.(2010) based\n\n\n\n\non diet overlap.\n\n\nThe \nsimulate\n function will automatically perform the rewiring depending on which option is chosen. Further parameters can also be supplied to \nmodel_parameters\n.\n\n\nSimulations with rewiring are run in the same way as those without, for example using ADBM rewiring:\n\n\nA = nichemodel(10, 0.3);\np = model_parameters(A,rewire_method = :ADBM);\nb = rand(size(A, 1));\n\ns = simulate(p, b, start=0, stop=50, steps=1000)\n\n\n\n\n\n\nRewiring parameters\n\n\nAs for all other parameters, rewiring parameters can be passed to \nmodel_parameters\n. The parameters' default values follow the litterature (see references above). When no alternative value is provided, any value can be passed, as long as it is of the same type as the default value.\n\n\nFor more details on the parameters meaning and value, see the references\n\n\n\n\nPetchey's ADBM model\n\n\n\n\n\n\n\n\nName\n\n\nMeaning\n\n\nDefault value\n\n\nAlternative value\n\n\n\n\n\n\n\n\n\n\nNmethod\n\n\nMethod used to calculate the resource density\n\n\n:original\n\n\n:biomass\n\n\n\n\n\n\nHmethod\n\n\nMethod used to calculate the handling time\n\n\n:ratio\n\n\n:power\n\n\n\n\n\n\nn\n\n\nScaling constant for the resource density\n\n\n1.0\n\n\n\u2013\n\n\n\n\n\n\nni\n\n\nSpecies-specific scaling exponent for the resource density\n\n\n0.75\n\n\n\u2013\n\n\n\n\n\n\nb\n\n\nScaling constant for handling time\n\n\n0.401\n\n\n\u2013\n\n\n\n\n\n\nh_adbm\n\n\nScaling constant for handling time\n\n\n1.0\n\n\n\u2013\n\n\n\n\n\n\nhi\n\n\nConsumer specific scaling exponent for handling time\n\n\n1.0\n\n\n\u2013\n\n\n\n\n\n\nhj\n\n\nResource specific scaling constant for handling time\n\n\n1.0\n\n\n\u2013\n\n\n\n\n\n\ne\n\n\nScaling constant for the net energy gain\n\n\n1.0\n\n\n\u2013\n\n\n\n\n\n\na_adbm\n\n\nScaling constant for the attack rate\n\n\n0.0189\n\n\n\u2013\n\n\n\n\n\n\nai\n\n\nConsumer specific scaling exponent for the attack rate\n\n\n-0.491\n\n\n\u2013\n\n\n\n\n\n\naj\n\n\nResource specific scaling exponent for the attack rate\n\n\n-0.465\n\n\n\u2013\n\n\n\n\n\n\n\n\n\n\nGilljam's diet similarity model\n\n\n\n\n\n\n\n\nName\n\n\nMeaning\n\n\nDefault value\n\n\nAlternative value\n\n\n\n\n\n\n\n\n\n\ncost\n\n\nRewiring cost (a consumer decrease in efficiency when exploiting novel resource)\n\n\n0.0\n\n\n\u2013\n\n\n\n\n\n\nspecialistPrefMag\n\n\nStrength of the consumer preference for one prey species if \npreferenceMethod = :specialist\n\n\n0.9\n\n\n\u2013\n\n\n\n\n\n\npreferenceMethod\n\n\nScenarios with respect to prey preferences of consumers\n\n\n:generalist\n\n\n:specialist\n\n\n\n\n\n\n\n\n\n\nStaniczenko's diet overlap model\n\n\nNo extra parameters are needed for this rewiring method.\n\n\n\n\nReferences\n\n\n\n\nGilljam, D., Curtsdotter, A., \n Ebenman, B. (2015). Adaptive rewiring aggravates the effects of species loss in ecosystems. \nNature communications\n, 6, 8412.\n\n\nPetchey, O. L., Beckerman, A. P., Riede, J. O., \n Warren, P. H. (2008). Size, foraging, and food web structure. \nProceedings of the National Academy of Sciences\n, 105(11), 4191-4196.\n\n\nStaniczenko, P., Lewis, O. T., Jones, N. S., \n Reed\u2010Tsochas, F. (2010). Structural dynamics and robustness of food webs. \nEcology letters\n, 13(7), 891-899.", 
            "title": "Extinctions"
        }, 
        {
            "location": "/man/extinctions/#extinctions", 
            "text": "Simulations can be run with rewiring by using the  rewiring_method  keyword in  model_parameters . This allows species to form new links following extinctions according to some set of rules. There are four options for the  rewiring_method  argument:   :none  - Default setting with no rewiring  :ADBM  - The allometric diet breadth model (ADBM) as described in Petchey   et al. (2008). Based on optimal foraging theory.   :Gilljam  - The rewiring mechanism used by Gilljam et al.(2015) based on diet   similarity.   :stan  - The rewiring mechanism used by Staniczenko et al.(2010) based   on diet overlap.  The  simulate  function will automatically perform the rewiring depending on which option is chosen. Further parameters can also be supplied to  model_parameters .  Simulations with rewiring are run in the same way as those without, for example using ADBM rewiring:  A = nichemodel(10, 0.3);\np = model_parameters(A,rewire_method = :ADBM);\nb = rand(size(A, 1));\n\ns = simulate(p, b, start=0, stop=50, steps=1000)", 
            "title": "Extinctions"
        }, 
        {
            "location": "/man/extinctions/#rewiring-parameters", 
            "text": "As for all other parameters, rewiring parameters can be passed to  model_parameters . The parameters' default values follow the litterature (see references above). When no alternative value is provided, any value can be passed, as long as it is of the same type as the default value.  For more details on the parameters meaning and value, see the references", 
            "title": "Rewiring parameters"
        }, 
        {
            "location": "/man/extinctions/#petcheys-adbm-model", 
            "text": "Name  Meaning  Default value  Alternative value      Nmethod  Method used to calculate the resource density  :original  :biomass    Hmethod  Method used to calculate the handling time  :ratio  :power    n  Scaling constant for the resource density  1.0  \u2013    ni  Species-specific scaling exponent for the resource density  0.75  \u2013    b  Scaling constant for handling time  0.401  \u2013    h_adbm  Scaling constant for handling time  1.0  \u2013    hi  Consumer specific scaling exponent for handling time  1.0  \u2013    hj  Resource specific scaling constant for handling time  1.0  \u2013    e  Scaling constant for the net energy gain  1.0  \u2013    a_adbm  Scaling constant for the attack rate  0.0189  \u2013    ai  Consumer specific scaling exponent for the attack rate  -0.491  \u2013    aj  Resource specific scaling exponent for the attack rate  -0.465  \u2013", 
            "title": "Petchey's ADBM model"
        }, 
        {
            "location": "/man/extinctions/#gilljams-diet-similarity-model", 
            "text": "Name  Meaning  Default value  Alternative value      cost  Rewiring cost (a consumer decrease in efficiency when exploiting novel resource)  0.0  \u2013    specialistPrefMag  Strength of the consumer preference for one prey species if  preferenceMethod = :specialist  0.9  \u2013    preferenceMethod  Scenarios with respect to prey preferences of consumers  :generalist  :specialist", 
            "title": "Gilljam's diet similarity model"
        }, 
        {
            "location": "/man/extinctions/#staniczenkos-diet-overlap-model", 
            "text": "No extra parameters are needed for this rewiring method.", 
            "title": "Staniczenko's diet overlap model"
        }, 
        {
            "location": "/man/extinctions/#references", 
            "text": "Gilljam, D., Curtsdotter, A.,   Ebenman, B. (2015). Adaptive rewiring aggravates the effects of species loss in ecosystems.  Nature communications , 6, 8412.  Petchey, O. L., Beckerman, A. P., Riede, J. O.,   Warren, P. H. (2008). Size, foraging, and food web structure.  Proceedings of the National Academy of Sciences , 105(11), 4191-4196.  Staniczenko, P., Lewis, O. T., Jones, N. S.,   Reed\u2010Tsochas, F. (2010). Structural dynamics and robustness of food webs.  Ecology letters , 13(7), 891-899.", 
            "title": "References"
        }, 
        {
            "location": "/man/contributing/", 
            "text": "Contributing to the package\n\n\n\n\nReporting issues\n\n\nA simple yet very useful way to contribute to \nBioEnergeticFoodWebs\n is to report issues on \nGitHub\n.\n\n\nIssues can be either reports of bugs, or suggestions of things to improve in the package.\n\n\n\n\nAdding code and features\n\n\nPlease start by submitting an issue explaining what you would like to add. When we merge your changes into a new release, we will give you authorship on the DOI provided by \nZenodo\n.\n\n\n\n\nTip\n\n\nWhen you contribute, please fork the \nnext\n branch, and not the \nmaster\n one. In order to make sure that the \nmaster\n branch is always functional, we do not commit directly to it.", 
            "title": "Contributing"
        }, 
        {
            "location": "/man/contributing/#contributing-to-the-package", 
            "text": "", 
            "title": "Contributing to the package"
        }, 
        {
            "location": "/man/contributing/#reporting-issues", 
            "text": "A simple yet very useful way to contribute to  BioEnergeticFoodWebs  is to report issues on  GitHub .  Issues can be either reports of bugs, or suggestions of things to improve in the package.", 
            "title": "Reporting issues"
        }, 
        {
            "location": "/man/contributing/#adding-code-and-features", 
            "text": "Please start by submitting an issue explaining what you would like to add. When we merge your changes into a new release, we will give you authorship on the DOI provided by  Zenodo .   Tip  When you contribute, please fork the  next  branch, and not the  master  one. In order to make sure that the  master  branch is always functional, we do not commit directly to it.", 
            "title": "Adding code and features"
        }, 
        {
            "location": "/lib/public/", 
            "text": "Public Documentation\n\n\nDocumentation for \nBioEnergeticFoodWebs\n's public (exported) interface.\n\n\nSee \nInternal Documentation\n for documentation on internal functions.\n\n\n\n\nContents\n\n\n\n\nPublic Documentation\n\n\nContents\n\n\nIndex\n\n\nSetting up simulations\n\n\nGenerating networks\n\n\nSimulating and saving the output\n\n\nAnalysis of output\n\n\n\n\n\n\n\n\n\n\nIndex\n\n\n\n\nBioEnergeticFoodWebs.foodweb_evenness\n\n\nBioEnergeticFoodWebs.nichemodel\n\n\nBioEnergeticFoodWebs.population_biomass\n\n\nBioEnergeticFoodWebs.population_stability\n\n\nBioEnergeticFoodWebs.save\n\n\nBioEnergeticFoodWebs.simulate\n\n\nBioEnergeticFoodWebs.species_persistence\n\n\nBioEnergeticFoodWebs.species_richness\n\n\nBioEnergeticFoodWebs.total_biomass\n\n\n\n\n\n\nSetting up simulations\n\n\nmodel_parameters\n\n\n\n\n\n\nGenerating networks\n\n\n#\n\n\nBioEnergeticFoodWebs.nichemodel\n \n \nFunction\n.\n\n\nNiche model of food webs\n\n\nTakes a number of species \nS\n and a number of interactions \nL\n, and returns a food web with predators in rows, and preys in columns. This function is used internally by \nnichemodel\n called with a connectance.\n\n\nsource\n\n\nNiche model of food webs\n\n\nTakes a number of species \nS\n and a connectance \nC\n, and returns a food web with predators in rows, and preys in columns. Note that the connectance is first transformed into an integer number of interactions.\n\n\nThis function has two keyword arguments:\n\n\n\n\ntolerance\n is the allowed error on tolerance (see below)\n\n\ntoltype\n is the type or error, and can be \n:abs\n (absolute) and \n:rel\n\n\n\n\n(relative). Relative tolerance is the amount of error allowed, relative to the desired connectance value. If the simulated network has a tolerance x, the target connectance is c, then the relative error is |1-x/c|.\n\n\nsource\n\n\n\n\nSimulating and saving the output\n\n\n#\n\n\nBioEnergeticFoodWebs.simulate\n \n \nFunction\n.\n\n\nMain simulation loop\n\n\nsimulate(p, biomass; start::Int64=0, stop::Int64=500, use::Symbol=:stiff)\n\n\n\n\nThis function takes two mandatory arguments:\n\n\n\n\np\n is a \nDict\n as returned by \nmake_parameters\n\n\nbiomass\n is an \nArray{Float64, 1}\n with the initial biomasses of every species\n\n\n\n\nInternally, the function will check that the length of \nbiomass\n matches with the size of the network.\n\n\nIn addition, the function takes three optional arguments:\n\n\n\n\nstart\n (defaults to 0), the initial time\n\n\nstop\n (defaults to 500), the final time\n\n\nuse\n (defaults to \n:stiff\n), a hint to select the solver\n\n\n\n\nThe integration method is, by default, \n:stiff\n, and can be changed to \n:nonstiff\n. This is because internally, this function used the \nDifferentialEquations\n package to pick the most appropriate algorithm.\n\n\nThe \nsimulate\n function returns a \nDict{Symbol, Any}\n, with three top-level keys:\n\n\n\n\n:p\n, the parameters that were given as input\n\n\n:t\n, the timesteps\n\n\n:B\n, an \nArray{Float64, 2}\n with the biomasses\n\n\n\n\nThe array of biomasses has one row for each timestep, and one column for each species.\n\n\nsource\n\n\n#\n\n\nBioEnergeticFoodWebs.save\n \n \nFunction\n.\n\n\nSave the output of a simulation\n\n\nTakes a simulation output as a mandatory argument. The two keyword arguments are \nas\n (can be \n:json\n or \n:jld\n), defining the file format, and \nfilename\n (without an extension, defaults to \nNaN\n). If \n:jld\n is used, the variable is named \nbefwm_simul\n unless a \nvarname\n is given.\n\n\nCalled with the defaults, this function will write \nbefwm_xxxxxxxx.json\n with the current simulation output, where \nxxxxxxxx\n is a hash of the \np\n output (ensuring that all output files are unique).\n\n\nThis function is \nnot\n exported, so it must be called with \nBioEnergeticFoodWebs.save\n.\n\n\nsource\n\n\n\n\nAnalysis of output\n\n\n#\n\n\nBioEnergeticFoodWebs.population_stability\n \n \nFunction\n.\n\n\nPopulation stability\n\n\nPopulation stability is measured as the mean of the negative coefficient of variations of all species with an abundance higher than \nthreshold\n. By default, the stability is measured over the last \nlast=1000\n timesteps.\n\n\nsource\n\n\n#\n\n\nBioEnergeticFoodWebs.total_biomass\n \n \nFunction\n.\n\n\nTotal biomass\n\n\nReturns the sum of biomass, averaged over the last \nlast\n timesteps.\n\n\nsource\n\n\n#\n\n\nBioEnergeticFoodWebs.population_biomass\n \n \nFunction\n.\n\n\nPer species biomass\n\n\nReturns the average biomass of all species, over the last \nlast\n timesteps.\n\n\nsource\n\n\n#\n\n\nBioEnergeticFoodWebs.foodweb_evenness\n \n \nFunction\n.\n\n\nFood web diversity\n\n\nBased on the average of Shannon's entropy (corrected for the number of species) over the last \nlast\n timesteps. Values close to 1 indicate that all populations have equal biomasses.\n\n\nsource\n\n\n#\n\n\nBioEnergeticFoodWebs.species_richness\n \n \nFunction\n.\n\n\nNumber of surviving species\n\n\nNumber of species with a biomass larger than the \nthreshold\n. The threshold is by default set at \neps()\n, which should be close to 10^-16.\n\n\nsource\n\n\n#\n\n\nBioEnergeticFoodWebs.species_persistence\n \n \nFunction\n.\n\n\nProportion of surviving species\n\n\nProportion of species with a biomass larger than the \nthreshold\n. The threshold is by default set at \neps()\n, which should be close to 10^-16.\n\n\nsource", 
            "title": "Public"
        }, 
        {
            "location": "/lib/public/#public-documentation", 
            "text": "Documentation for  BioEnergeticFoodWebs 's public (exported) interface.  See  Internal Documentation  for documentation on internal functions.", 
            "title": "Public Documentation"
        }, 
        {
            "location": "/lib/public/#contents", 
            "text": "Public Documentation  Contents  Index  Setting up simulations  Generating networks  Simulating and saving the output  Analysis of output", 
            "title": "Contents"
        }, 
        {
            "location": "/lib/public/#index", 
            "text": "BioEnergeticFoodWebs.foodweb_evenness  BioEnergeticFoodWebs.nichemodel  BioEnergeticFoodWebs.population_biomass  BioEnergeticFoodWebs.population_stability  BioEnergeticFoodWebs.save  BioEnergeticFoodWebs.simulate  BioEnergeticFoodWebs.species_persistence  BioEnergeticFoodWebs.species_richness  BioEnergeticFoodWebs.total_biomass", 
            "title": "Index"
        }, 
        {
            "location": "/lib/public/#setting-up-simulations", 
            "text": "model_parameters", 
            "title": "Setting up simulations"
        }, 
        {
            "location": "/lib/public/#generating-networks", 
            "text": "#  BioEnergeticFoodWebs.nichemodel     Function .  Niche model of food webs  Takes a number of species  S  and a number of interactions  L , and returns a food web with predators in rows, and preys in columns. This function is used internally by  nichemodel  called with a connectance.  source  Niche model of food webs  Takes a number of species  S  and a connectance  C , and returns a food web with predators in rows, and preys in columns. Note that the connectance is first transformed into an integer number of interactions.  This function has two keyword arguments:   tolerance  is the allowed error on tolerance (see below)  toltype  is the type or error, and can be  :abs  (absolute) and  :rel   (relative). Relative tolerance is the amount of error allowed, relative to the desired connectance value. If the simulated network has a tolerance x, the target connectance is c, then the relative error is |1-x/c|.  source", 
            "title": "Generating networks"
        }, 
        {
            "location": "/lib/public/#simulating-and-saving-the-output", 
            "text": "#  BioEnergeticFoodWebs.simulate     Function .  Main simulation loop  simulate(p, biomass; start::Int64=0, stop::Int64=500, use::Symbol=:stiff)  This function takes two mandatory arguments:   p  is a  Dict  as returned by  make_parameters  biomass  is an  Array{Float64, 1}  with the initial biomasses of every species   Internally, the function will check that the length of  biomass  matches with the size of the network.  In addition, the function takes three optional arguments:   start  (defaults to 0), the initial time  stop  (defaults to 500), the final time  use  (defaults to  :stiff ), a hint to select the solver   The integration method is, by default,  :stiff , and can be changed to  :nonstiff . This is because internally, this function used the  DifferentialEquations  package to pick the most appropriate algorithm.  The  simulate  function returns a  Dict{Symbol, Any} , with three top-level keys:   :p , the parameters that were given as input  :t , the timesteps  :B , an  Array{Float64, 2}  with the biomasses   The array of biomasses has one row for each timestep, and one column for each species.  source  #  BioEnergeticFoodWebs.save     Function .  Save the output of a simulation  Takes a simulation output as a mandatory argument. The two keyword arguments are  as  (can be  :json  or  :jld ), defining the file format, and  filename  (without an extension, defaults to  NaN ). If  :jld  is used, the variable is named  befwm_simul  unless a  varname  is given.  Called with the defaults, this function will write  befwm_xxxxxxxx.json  with the current simulation output, where  xxxxxxxx  is a hash of the  p  output (ensuring that all output files are unique).  This function is  not  exported, so it must be called with  BioEnergeticFoodWebs.save .  source", 
            "title": "Simulating and saving the output"
        }, 
        {
            "location": "/lib/public/#analysis-of-output", 
            "text": "#  BioEnergeticFoodWebs.population_stability     Function .  Population stability  Population stability is measured as the mean of the negative coefficient of variations of all species with an abundance higher than  threshold . By default, the stability is measured over the last  last=1000  timesteps.  source  #  BioEnergeticFoodWebs.total_biomass     Function .  Total biomass  Returns the sum of biomass, averaged over the last  last  timesteps.  source  #  BioEnergeticFoodWebs.population_biomass     Function .  Per species biomass  Returns the average biomass of all species, over the last  last  timesteps.  source  #  BioEnergeticFoodWebs.foodweb_evenness     Function .  Food web diversity  Based on the average of Shannon's entropy (corrected for the number of species) over the last  last  timesteps. Values close to 1 indicate that all populations have equal biomasses.  source  #  BioEnergeticFoodWebs.species_richness     Function .  Number of surviving species  Number of species with a biomass larger than the  threshold . The threshold is by default set at  eps() , which should be close to 10^-16.  source  #  BioEnergeticFoodWebs.species_persistence     Function .  Proportion of surviving species  Proportion of species with a biomass larger than the  threshold . The threshold is by default set at  eps() , which should be close to 10^-16.  source", 
            "title": "Analysis of output"
        }, 
        {
            "location": "/lib/internals/", 
            "text": "Internal Documentation\n\n\n\n\nContents\n\n\n\n\nInternal Documentation\n\n\nContents\n\n\nIndex\n\n\nFunctions and methods for networks\n\n\nODE wrappers and functions for integration\n\n\nFunctions to work on output\n\n\nFunctions to prepare and check parameters\n\n\n\n\n\n\n\n\n\n\nIndex\n\n\n\n\nBioEnergeticFoodWebs.check_food_web\n\n\nBioEnergeticFoodWebs.check_initial_parameters\n\n\nBioEnergeticFoodWebs.check_parameters\n\n\nBioEnergeticFoodWebs.coefficient_of_variation\n\n\nBioEnergeticFoodWebs.connectance\n\n\nBioEnergeticFoodWebs.dBdt\n\n\nBioEnergeticFoodWebs.distance_to_producer\n\n\nBioEnergeticFoodWebs.growthrate\n\n\nBioEnergeticFoodWebs.model_parameters\n\n\nBioEnergeticFoodWebs.shannon\n\n\nBioEnergeticFoodWebs.trophic_rank\n\n\n\n\n\n\nFunctions and methods for networks\n\n\n#\n\n\nBioEnergeticFoodWebs.connectance\n \n \nFunction\n.\n\n\n Connectance of a network\n\n\nReturns the connectance of a square matrix, defined as $S/L^2$.\n\n\nsource\n\n\n#\n\n\nBioEnergeticFoodWebs.distance_to_producer\n \n \nFunction\n.\n\n\nDistance to a primary producer\n\n\nThis function measures, for every species, its shortest path to a primary producer using matrix exponentiation. A primary producer has a value of 1, a primary consumer a value of 2, and so forth.\n\n\nsource\n\n\n#\n\n\nBioEnergeticFoodWebs.trophic_rank\n \n \nFunction\n.\n\n\nTrophic rank\n\n\nBased on the average distance of preys to primary producers. Specifically, the rank is defined as the average of the distance of preys to primary producers (recursively). Primary producers always have a trophic rank of 1.\n\n\nsource\n\n\n#\n\n\nBioEnergeticFoodWebs.check_food_web\n \n \nFunction\n.\n\n\nIs the matrix correctly formatted?\n\n\nA \ncorrect\n matrix has only 0 and 1, two dimensions, and is square.\n\n\nThis function returns nothing, but raises an \nAssertionError\n if one of the conditions is not met.\n\n\nsource\n\n\n\n\nODE wrappers and functions for integration\n\n\n#\n\n\nBioEnergeticFoodWebs.dBdt\n \n \nFunction\n.\n\n\nDerivatives\n\n\nThis function is the one wrapped by the various integration routines. Based on a timepoint \nt\n, an array of biomasses \nbiomass\n, and a series of simulation parameters \np\n, it will return \ndB/dt\n for every species.\n\n\nsource\n\n\n#\n\n\nBioEnergeticFoodWebs.growthrate\n \n \nFunction\n.\n\n\nGrowth rate\n\n\nTODO\n\n\nsource\n\n\n\n\nFunctions to work on output\n\n\n#\n\n\nBioEnergeticFoodWebs.coefficient_of_variation\n \n \nFunction\n.\n\n\nCoefficient of variation\n\n\nCorrected for the sample size.\n\n\nsource\n\n\n#\n\n\nBioEnergeticFoodWebs.shannon\n \n \nFunction\n.\n\n\nShannon's entropy\n\n\nCorrected for the number of species, removes negative and null values, return \nNaN\n in case of problem.\n\n\nsource\n\n\n\n\nFunctions to prepare and check parameters\n\n\n#\n\n\nBioEnergeticFoodWebs.model_parameters\n \n \nFunction\n.\n\n\nCreate default parameters\n\n\nThis function creates model parameters, based on a food web matrix A. Specifically, the default values of the keyword parameters are:\n\n\n\n\n\n\n\n\nParameter\n\n\nDefault Value\n\n\nMeaning\n\n\n\n\n\n\n\n\n\n\nK\n\n\n1.0\n\n\ncarrying capacity of producers\n\n\n\n\n\n\nZ\n\n\n1.0\n\n\nconsumer-resource body mass ratio\n\n\n\n\n\n\nr\n\n\n1.0\n\n\ngrowth rate of producers\n\n\n\n\n\n\na_invertebrate\n\n\n0.314\n\n\nallometric constant for invertebrate consumers\n\n\n\n\n\n\na_producers\n\n\n1.0\n\n\nallometric constant of producers\n\n\n\n\n\n\na_vertebrate\n\n\n0.88\n\n\nallometric constant for vertebrate consumers\n\n\n\n\n\n\nc\n\n\n0\n\n\nquantifies the predator interference\n\n\n\n\n\n\nh\n\n\n1\n\n\nHill coefficient\n\n\n\n\n\n\ne_carnivore\n\n\n0.85\n\n\nassimilation efficiency of carnivores\n\n\n\n\n\n\ne_herbivore\n\n\n0.45\n\n\nassimilation efficiency of herbivores\n\n\n\n\n\n\nm_producers\n\n\n1\n\n\nbody-mass of producers\n\n\n\n\n\n\ny_invertebrate\n\n\n8\n\n\nmaximum consumption rate of invertebrate predators relative to their metabolic rate\n\n\n\n\n\n\ny_vertebrate\n\n\n4\n\n\nmaximum consumption rate of vertebrate predators relative to their metabolic rate\n\n\n\n\n\n\n\u0393\n\n\n0.5\n\n\nhalf-saturation density\n\n\n\n\n\n\n\u03b1\n\n\n1.0\n\n\ninterspecific competition relatively to intraspecific competition\n\n\n\n\n\n\nproductivity\n\n\n:species\n\n\ntype of productivity regulation\n\n\n\n\n\n\nrewire_method\n\n\n:none\n\n\nmethod for rewiring the foodweb following extinction events\n\n\n\n\n\n\ne\n\n\n1\n\n\n(ADBM) Scaling constant for the net energy gain\n\n\n\n\n\n\na_adbm\n\n\n0.0189\n\n\n(ADBM) Scaling constant for the attack rate\n\n\n\n\n\n\nai\n\n\n-0.491\n\n\n(ADBM) Consumer specific scaling exponent for the attack rate\n\n\n\n\n\n\naj\n\n\n-0.465\n\n\n(ADBM) Resource specific scaling exponent for the attack rate\n\n\n\n\n\n\nb\n\n\n0.401\n\n\n(ADBM) Scaling constant for handling time\n\n\n\n\n\n\nh_adbm\n\n\n1.0\n\n\n(ADBM) Scaling constant for handling time\n\n\n\n\n\n\nhi\n\n\n1.0\n\n\n(ADBM) Consumer specific scaling exponent for handling time\n\n\n\n\n\n\nhj\n\n\n1.0\n\n\n(ADBM) Resource specific scaling constant for handling time\n\n\n\n\n\n\nn\n\n\n1.0\n\n\n(ADBM) Scaling constant for the resource density\n\n\n\n\n\n\nni\n\n\n0.75\n\n\n(ADBM) Species-specific scaling exponent for the resource density\n\n\n\n\n\n\nHmethod\n\n\n:ratio\n\n\n(ADBM) Method used to calculate the handling time\n\n\n\n\n\n\nNmethod\n\n\n:original\n\n\n(ADBM) Method used to calculate the resource density\n\n\n\n\n\n\ncost\n\n\n0.0\n\n\n(Gilljam) Rewiring cost (a consumer decrease in efficiency when exploiting novel resource)\n\n\n\n\n\n\nspecialistPrefMag\n\n\n0.9\n\n\n(Gilljam) Strength of the consumer preference for 1 prey if \npreferenceMethod = :specialist\n\n\n\n\n\n\npreferenceMethod\n\n\n:generalist\n\n\n(Gilljam) Scenarios with respect to prey preferences of consumers\n\n\n\n\n\n\n\n\nAll of these values are passed as optional keyword arguments to the function.\n\n\nA = [0 1 1; 0 0 0; 0 0 0]\np = model_parameters(A, Z=100.0, productivity=:system)\n\n\n\n\nThe \nproductivity\n keyword can be either \n:species\n (each species has an independant carrying capacity equal to \nK\n), \n:system\n (the carrying capacity is K divided by the number of primary producers), or \n:competitive\n (the species compete with themselves at rate 1.0, and with one another at rate \u03b1).\n\n\nIt is possible for the user to specify a vector of species body-mass, called \nbodymass\n \u2013 please do pay attention to the fact that the model assumes that primary producers have a bodymass equal to unity, since all biological rates are expressed relatively. We do not perform any check on whether or not the user-supplied body-mass vector is correct (mostly because there is no way of defining correctness for vectors where body-mass of producers are not equal to unity).\n\n\nThe keyword \nvertebrates\n is an array of \ntrue\n or \nfalse\n for every species in the matrix. By default, all species are invertebrates.\n\n\nA rewiring method can pe passed to specified if the foodweb should be rewired following extinctions events, and the method that should be used to perform the rewiring. This \nrewire_method\n keyword can be eighter \n:none\n (no rewiring), \n:ADBM\n (allometric diet breadth model as described in Petchey et al., 2008), \n:Gilljam\n (rewiring mechanism used by Gilljam et al., 2015, based on diet similarity) or \n:stan\n (rewiring mechanism used by Staniczenko et al, 2010, based on diet overlap).\n\n\nIf \nrewire_method\nis \n:ADBM\n or \n:Gilljam\n, additional keywords can be passed. See the online documentation and the original references for more details.\n\n\nsource\n\n\n#\n\n\nBioEnergeticFoodWebs.check_initial_parameters\n \n \nFunction\n.\n\n\nCheck initial parameters\n\n\nsource\n\n\n#\n\n\nBioEnergeticFoodWebs.check_parameters\n \n \nFunction\n.\n\n\nAre the simulation parameters present?\n\n\nThis function will make sure that all the required parameters are here, and that the arrays and matrices have matching dimensions.\n\n\nsource", 
            "title": "Internals"
        }, 
        {
            "location": "/lib/internals/#internal-documentation", 
            "text": "", 
            "title": "Internal Documentation"
        }, 
        {
            "location": "/lib/internals/#contents", 
            "text": "Internal Documentation  Contents  Index  Functions and methods for networks  ODE wrappers and functions for integration  Functions to work on output  Functions to prepare and check parameters", 
            "title": "Contents"
        }, 
        {
            "location": "/lib/internals/#index", 
            "text": "BioEnergeticFoodWebs.check_food_web  BioEnergeticFoodWebs.check_initial_parameters  BioEnergeticFoodWebs.check_parameters  BioEnergeticFoodWebs.coefficient_of_variation  BioEnergeticFoodWebs.connectance  BioEnergeticFoodWebs.dBdt  BioEnergeticFoodWebs.distance_to_producer  BioEnergeticFoodWebs.growthrate  BioEnergeticFoodWebs.model_parameters  BioEnergeticFoodWebs.shannon  BioEnergeticFoodWebs.trophic_rank", 
            "title": "Index"
        }, 
        {
            "location": "/lib/internals/#functions-and-methods-for-networks", 
            "text": "#  BioEnergeticFoodWebs.connectance     Function .   Connectance of a network  Returns the connectance of a square matrix, defined as $S/L^2$.  source  #  BioEnergeticFoodWebs.distance_to_producer     Function .  Distance to a primary producer  This function measures, for every species, its shortest path to a primary producer using matrix exponentiation. A primary producer has a value of 1, a primary consumer a value of 2, and so forth.  source  #  BioEnergeticFoodWebs.trophic_rank     Function .  Trophic rank  Based on the average distance of preys to primary producers. Specifically, the rank is defined as the average of the distance of preys to primary producers (recursively). Primary producers always have a trophic rank of 1.  source  #  BioEnergeticFoodWebs.check_food_web     Function .  Is the matrix correctly formatted?  A  correct  matrix has only 0 and 1, two dimensions, and is square.  This function returns nothing, but raises an  AssertionError  if one of the conditions is not met.  source", 
            "title": "Functions and methods for networks"
        }, 
        {
            "location": "/lib/internals/#ode-wrappers-and-functions-for-integration", 
            "text": "#  BioEnergeticFoodWebs.dBdt     Function .  Derivatives  This function is the one wrapped by the various integration routines. Based on a timepoint  t , an array of biomasses  biomass , and a series of simulation parameters  p , it will return  dB/dt  for every species.  source  #  BioEnergeticFoodWebs.growthrate     Function .  Growth rate  TODO  source", 
            "title": "ODE wrappers and functions for integration"
        }, 
        {
            "location": "/lib/internals/#functions-to-work-on-output", 
            "text": "#  BioEnergeticFoodWebs.coefficient_of_variation     Function .  Coefficient of variation  Corrected for the sample size.  source  #  BioEnergeticFoodWebs.shannon     Function .  Shannon's entropy  Corrected for the number of species, removes negative and null values, return  NaN  in case of problem.  source", 
            "title": "Functions to work on output"
        }, 
        {
            "location": "/lib/internals/#functions-to-prepare-and-check-parameters", 
            "text": "#  BioEnergeticFoodWebs.model_parameters     Function .  Create default parameters  This function creates model parameters, based on a food web matrix A. Specifically, the default values of the keyword parameters are:     Parameter  Default Value  Meaning      K  1.0  carrying capacity of producers    Z  1.0  consumer-resource body mass ratio    r  1.0  growth rate of producers    a_invertebrate  0.314  allometric constant for invertebrate consumers    a_producers  1.0  allometric constant of producers    a_vertebrate  0.88  allometric constant for vertebrate consumers    c  0  quantifies the predator interference    h  1  Hill coefficient    e_carnivore  0.85  assimilation efficiency of carnivores    e_herbivore  0.45  assimilation efficiency of herbivores    m_producers  1  body-mass of producers    y_invertebrate  8  maximum consumption rate of invertebrate predators relative to their metabolic rate    y_vertebrate  4  maximum consumption rate of vertebrate predators relative to their metabolic rate    \u0393  0.5  half-saturation density    \u03b1  1.0  interspecific competition relatively to intraspecific competition    productivity  :species  type of productivity regulation    rewire_method  :none  method for rewiring the foodweb following extinction events    e  1  (ADBM) Scaling constant for the net energy gain    a_adbm  0.0189  (ADBM) Scaling constant for the attack rate    ai  -0.491  (ADBM) Consumer specific scaling exponent for the attack rate    aj  -0.465  (ADBM) Resource specific scaling exponent for the attack rate    b  0.401  (ADBM) Scaling constant for handling time    h_adbm  1.0  (ADBM) Scaling constant for handling time    hi  1.0  (ADBM) Consumer specific scaling exponent for handling time    hj  1.0  (ADBM) Resource specific scaling constant for handling time    n  1.0  (ADBM) Scaling constant for the resource density    ni  0.75  (ADBM) Species-specific scaling exponent for the resource density    Hmethod  :ratio  (ADBM) Method used to calculate the handling time    Nmethod  :original  (ADBM) Method used to calculate the resource density    cost  0.0  (Gilljam) Rewiring cost (a consumer decrease in efficiency when exploiting novel resource)    specialistPrefMag  0.9  (Gilljam) Strength of the consumer preference for 1 prey if  preferenceMethod = :specialist    preferenceMethod  :generalist  (Gilljam) Scenarios with respect to prey preferences of consumers     All of these values are passed as optional keyword arguments to the function.  A = [0 1 1; 0 0 0; 0 0 0]\np = model_parameters(A, Z=100.0, productivity=:system)  The  productivity  keyword can be either  :species  (each species has an independant carrying capacity equal to  K ),  :system  (the carrying capacity is K divided by the number of primary producers), or  :competitive  (the species compete with themselves at rate 1.0, and with one another at rate \u03b1).  It is possible for the user to specify a vector of species body-mass, called  bodymass  \u2013 please do pay attention to the fact that the model assumes that primary producers have a bodymass equal to unity, since all biological rates are expressed relatively. We do not perform any check on whether or not the user-supplied body-mass vector is correct (mostly because there is no way of defining correctness for vectors where body-mass of producers are not equal to unity).  The keyword  vertebrates  is an array of  true  or  false  for every species in the matrix. By default, all species are invertebrates.  A rewiring method can pe passed to specified if the foodweb should be rewired following extinctions events, and the method that should be used to perform the rewiring. This  rewire_method  keyword can be eighter  :none  (no rewiring),  :ADBM  (allometric diet breadth model as described in Petchey et al., 2008),  :Gilljam  (rewiring mechanism used by Gilljam et al., 2015, based on diet similarity) or  :stan  (rewiring mechanism used by Staniczenko et al, 2010, based on diet overlap).  If  rewire_method is  :ADBM  or  :Gilljam , additional keywords can be passed. See the online documentation and the original references for more details.  source  #  BioEnergeticFoodWebs.check_initial_parameters     Function .  Check initial parameters  source  #  BioEnergeticFoodWebs.check_parameters     Function .  Are the simulation parameters present?  This function will make sure that all the required parameters are here, and that the arrays and matrices have matching dimensions.  source", 
            "title": "Functions to prepare and check parameters"
        }
    ]
}